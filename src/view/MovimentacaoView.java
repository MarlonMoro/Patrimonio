/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import dao.BlocoDAO;
import dao.PatrimonioDAO;
import dao.PisoDAO;
import dao.SalaDAO;
import dao.UnidadeDAO;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import model.BlocoM;
import model.PatrimonioM;
import model.PisoM;
import model.SalaM;
import model.UnidadeM;

/**
 *
 * @author NUPSI-01
 */
public class MovimentacaoView extends javax.swing.JInternalFrame {

    /**
     * Creates new form MovimentacaoView
     */
    
    List<PatrimonioM> listaPatrimonio;
    List<UnidadeM> listaUnidade;
    UnidadeDAO unidadeDAO;
    List<BlocoM> listaBloco;
    BlocoDAO blocoDAO;
    List<PisoM> listaPiso;
    PatrimonioDAO patrimonioDAO;
    PisoDAO pisoDAO;
    PisoM pisoM;
    BlocoM blocoM;
    UnidadeM unidM;
    SalaDAO salaDAO;
    SalaM salaM;
    List<SalaM> listaSala;
    List<PatrimonioM> listaPatrimonioSelecionados;
    List<PatrimonioM> listaMovimentacao;
    PatrimonioM patrimonio;
    
    public MovimentacaoView() {
        initComponents();
        
        this.setVisible(true);
        
        listaPatrimonio = new ArrayList<>();
        patrimonioDAO = new PatrimonioDAO();
        listaUnidade = new ArrayList<>();
        unidadeDAO = new UnidadeDAO();
        listaBloco = new ArrayList<>();
        blocoDAO = new BlocoDAO();
        listaPiso = new ArrayList<>();
        pisoDAO = new PisoDAO();
        blocoM = new BlocoM();
        unidM = new UnidadeM();
        salaDAO = new SalaDAO();
        salaM = new SalaM();
        listaSala = new ArrayList<>();
        pisoM = new PisoM();
        listaPatrimonioSelecionados = new ArrayList<>();
        listaMovimentacao = new ArrayList<>();
        
        atualizaTabelaEsquerda();
        consertaTamanhoTabelaDireita();
        
        atualizaBoxUnidade();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbxUnidade = new javax.swing.JComboBox<>();
        cbxBloco = new javax.swing.JComboBox<>();
        cbxSala = new javax.swing.JComboBox<>();
        cbxPiso = new javax.swing.JComboBox<>();
        cbxUnidadeDestino = new javax.swing.JComboBox<>();
        cbxBlocoDestino = new javax.swing.JComboBox<>();
        cbxSalaDestino = new javax.swing.JComboBox<>();
        cbxPisoDestino = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbeEsquerda = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbeDireita = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        cbxUnidade.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxUnidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxUnidadeActionPerformed(evt);
            }
        });

        cbxBloco.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxBloco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxBlocoActionPerformed(evt);
            }
        });

        cbxSala.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxSala.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxSalaItemStateChanged(evt);
            }
        });
        cbxSala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxSalaActionPerformed(evt);
            }
        });
        cbxSala.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                cbxSalaPropertyChange(evt);
            }
        });

        cbxPiso.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxPiso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxPisoActionPerformed(evt);
            }
        });

        cbxUnidadeDestino.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxUnidadeDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxUnidadeDestinoActionPerformed(evt);
            }
        });

        cbxBlocoDestino.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxBlocoDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxBlocoDestinoActionPerformed(evt);
            }
        });

        cbxSalaDestino.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxSalaDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxSalaDestinoActionPerformed(evt);
            }
        });

        cbxPisoDestino.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxPisoDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxPisoDestinoActionPerformed(evt);
            }
        });

        tbeEsquerda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbeEsquerda);

        jButton1.setText(">>");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        tbeDireita.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Codigo", "Descrição", "Conservação"
            }
        ));
        jScrollPane2.setViewportView(tbeDireita);

        jButton2.setText("<<");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Movimentar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbxUnidade, 0, 89, Short.MAX_VALUE)
                    .addComponent(cbxBloco, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbxPiso, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbxSala, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbxBlocoDestino, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbxPisoDestino, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbxSalaDestino, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbxUnidadeDestino, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(144, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbxUnidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbxBloco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbxPiso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbxSala, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbxUnidadeDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbxBlocoDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbxPisoDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbxSalaDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton3)
                                .addGap(79, 79, 79))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(198, 198, 198)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbxBlocoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxBlocoActionPerformed
       if (cbxBloco.getSelectedIndex() < 1) {
            cbxPiso.removeAllItems();
            cbxPiso.addItem("--Selecione--");

        } else {
            cbxPiso.removeAllItems();
            cbxPiso.addItem("--Selecione--");
            //UnidadeM unid = new UnidadeM();
            try {
                blocoM = blocoDAO.buscaNome(cbxBloco.getSelectedItem().toString());
                listaPiso = pisoDAO.buscaBloc(blocoM.getId());
                for (PisoM piso : listaPiso) {
                    cbxPiso.addItem(piso.getDescricao());
                }
                cbxPiso.requestFocusInWindow();
            } catch (SQLException ex) {
                cbxPiso.removeAllItems();
                cbxPiso.addItem("--Selecione--");
            }
        }
    }//GEN-LAST:event_cbxBlocoActionPerformed

    
    
    
    private void cbxUnidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxUnidadeActionPerformed
        if (cbxUnidade.getSelectedIndex() < 1) {
            cbxBloco.removeAllItems();
            cbxBloco.addItem("--Selecione--");

        } else {
            cbxBloco.removeAllItems();
            cbxBloco.addItem("--Selecione--");
            
            try {
                unidM = unidadeDAO.buscaNome(cbxUnidade.getSelectedItem().toString());
                listaBloco = blocoDAO.buscaUni(unidM.getId());
                for (BlocoM bloc : listaBloco) {
                    cbxBloco.addItem(bloc.getDescricao());
                }
                cbxBloco.requestFocusInWindow();
            } catch (SQLException ex) {
                cbxBloco.removeAllItems();
                cbxBloco.addItem("--Selecione--");
            }
        }
    }//GEN-LAST:event_cbxUnidadeActionPerformed

    private void cbxPisoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxPisoActionPerformed
      if (cbxPiso.getSelectedIndex() < 1) {
            cbxSala.removeAllItems();
            cbxSala.addItem("--Selecione--");
            
        } else {
            cbxSala.removeAllItems();
            cbxSala.addItem("--Selecione--");
            //UnidadeM unid = new UnidadeM();
            try {
                pisoM = pisoDAO.buscaNome(cbxPiso.getSelectedItem().toString());
                listaSala = salaDAO.buscaPis(pisoM.getId());
                for (SalaM sala : listaSala) {
                    cbxSala.addItem(sala.getDescricao());
                }
                cbxSala.requestFocusInWindow();
            } catch (SQLException ex) {
                cbxSala.removeAllItems();
                cbxSala.addItem("--Selecione--");
            }
        }
    }//GEN-LAST:event_cbxPisoActionPerformed

    private void cbxSalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxSalaActionPerformed
      
        if (cbxSala.getSelectedIndex() < 1){
            atualizaTabelaEsquerda();
        }else{
            try {
                unidM = unidadeDAO.buscaNome(cbxUnidade.getSelectedItem().toString());//pega a unidade selecionada
                blocoM = blocoDAO.busca_id_unidade(unidM.getId(), cbxBloco.getSelectedItem().toString());// todos os blocos da unidade de cima
                pisoM = pisoDAO.busca_id_bloco(blocoM.getId(), cbxPiso.getSelectedItem().toString());//todos os pisos da unidade de cima
                salaM = salaDAO.buscaID(pisoM.getId(), cbxSala.getSelectedItem().toString());
                
                try {
                    listaPatrimonioSelecionados = patrimonioDAO.listaSelecionados(salaM.getId());
                    atualizaTabelaSelecionados();
                } catch (SQLException ex) {
                    Logger.getLogger(OrgaoView.class.getName()).log(Level.SEVERE, null, ex);
                }

            } catch (SQLException ex) {
                Logger.getLogger(RelatorioSalaView.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, ""+ex.getMessage(), "Erro", JOptionPane.WARNING_MESSAGE);
            }
            
            
        }
    }//GEN-LAST:event_cbxSalaActionPerformed

    private void cbxSalaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxSalaItemStateChanged
       
    }//GEN-LAST:event_cbxSalaItemStateChanged

    private void cbxSalaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_cbxSalaPropertyChange
       
    }//GEN-LAST:event_cbxSalaPropertyChange

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       
        try {
            patrimonio = patrimonioDAO.busca(Integer.parseInt(tbeEsquerda.getValueAt(tbeEsquerda.getSelectedRow(), 0).toString()));
            listaMovimentacao.add(patrimonio);
            for(int i = 0; i < listaPatrimonioSelecionados.size(); i++)
            {
                PatrimonioM p = listaPatrimonioSelecionados.get(i);

                if(p.getId() == patrimonio.getId())
                {
                    listaPatrimonioSelecionados.remove(p);
                    break;
                }
            }
             atualizaTabelaSelecionados();
             atualizaTabelaDireita();
        } catch (SQLException ex) {
            Logger.getLogger(MovimentacaoView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            patrimonio = patrimonioDAO.busca(Integer.parseInt(tbeDireita.getValueAt(tbeDireita.getSelectedRow(), 0).toString()));
            listaPatrimonioSelecionados.add(patrimonio);
            for(int i = 0; i < listaMovimentacao.size(); i++)
            {
                PatrimonioM p = listaMovimentacao.get(i);

                if(p.getId() == patrimonio.getId())
                {
                    listaMovimentacao.remove(p);
                    break;
                }
            }
             atualizaTabelaSelecionados();
             atualizaTabelaDireita();
        } catch (SQLException ex) {
            Logger.getLogger(MovimentacaoView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void cbxBlocoDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxBlocoDestinoActionPerformed
              if (cbxBlocoDestino.getSelectedIndex() < 1) {
            cbxPisoDestino.removeAllItems();
            cbxPisoDestino.addItem("--Selecione--");

        } else {
            cbxPisoDestino.removeAllItems();
            cbxPisoDestino.addItem("--Selecione--");
            //UnidadeM unid = new UnidadeM();
            try {
                blocoM = blocoDAO.buscaNome(cbxBlocoDestino.getSelectedItem().toString());
                listaPiso = pisoDAO.buscaBloc(blocoM.getId());
                for (PisoM piso : listaPiso) {
                    cbxPisoDestino.addItem(piso.getDescricao());
                }
                cbxPisoDestino.requestFocusInWindow();
            } catch (SQLException ex) {
                cbxPisoDestino.removeAllItems();
                cbxPisoDestino.addItem("--Selecione--");
            }
        }
    }//GEN-LAST:event_cbxBlocoDestinoActionPerformed

    private void cbxPisoDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxPisoDestinoActionPerformed
        if (cbxPisoDestino.getSelectedIndex() < 1) {
            cbxSalaDestino.removeAllItems();
            cbxSalaDestino.addItem("--Selecione--");
            
        } else {
            cbxSalaDestino.removeAllItems();
            cbxSalaDestino.addItem("--Selecione--");
            //UnidadeM unid = new UnidadeM();
            try {
                pisoM = pisoDAO.buscaNome(cbxPisoDestino.getSelectedItem().toString());
                listaSala = salaDAO.buscaPis(pisoM.getId());
                for (SalaM sala : listaSala) {
                    cbxSalaDestino.addItem(sala.getDescricao());
                }
                cbxSalaDestino.requestFocusInWindow();
            } catch (SQLException ex) {
                cbxSalaDestino.removeAllItems();
                cbxSalaDestino.addItem("--Selecione--");
            }
        }
    }//GEN-LAST:event_cbxPisoDestinoActionPerformed

    private void cbxUnidadeDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxUnidadeDestinoActionPerformed
         if (cbxUnidadeDestino.getSelectedIndex() < 1) {
            cbxBlocoDestino.removeAllItems();
            cbxBlocoDestino.addItem("--Selecione--");

        } else {
            cbxBlocoDestino.removeAllItems();
            cbxBlocoDestino.addItem("--Selecione--");
            
            try {
                unidM = unidadeDAO.buscaNome(cbxUnidadeDestino.getSelectedItem().toString());
                listaBloco = blocoDAO.buscaUni(unidM.getId());
                for (BlocoM bloc : listaBloco) {
                    cbxBlocoDestino.addItem(bloc.getDescricao());
                }
                cbxBlocoDestino.requestFocusInWindow();
            } catch (SQLException ex) {
                cbxBlocoDestino.removeAllItems();
                cbxBlocoDestino.addItem("--Selecione--");
            }
        }
    }//GEN-LAST:event_cbxUnidadeDestinoActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        try {
            unidM = unidadeDAO.buscaNome(cbxUnidadeDestino.getSelectedItem().toString());//pega a unidade selecionada
            blocoM = blocoDAO.busca_id_unidade(unidM.getId(), cbxBlocoDestino.getSelectedItem().toString());// todos os blocos da unidade de cima
            pisoM = pisoDAO.busca_id_bloco(blocoM.getId(), cbxPisoDestino.getSelectedItem().toString());//todos os pisos da unidade de cima
            salaM = salaDAO.buscaID(pisoM.getId(), cbxSalaDestino.getSelectedItem().toString());
            patrimonioDAO.movimentar(listaMovimentacao, salaM.getId());
            JOptionPane.showMessageDialog(null, "Movimentação realizada com Sucesso!\nSala Destino: "+salaM.getDescricao());
            listaPatrimonioSelecionados = patrimonioDAO.listaSelecionados(salaM.getId());
            listaMovimentacao = new ArrayList<>();
            atualizaTabelaEsquerda();
            atualizaTabelaDireita();
        } catch (SQLException ex) {
            Logger.getLogger(MovimentacaoView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    
    private void cbxSalaDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxSalaDestinoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxSalaDestinoActionPerformed
    
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbxBloco;
    private javax.swing.JComboBox<String> cbxBlocoDestino;
    private javax.swing.JComboBox<String> cbxPiso;
    private javax.swing.JComboBox<String> cbxPisoDestino;
    private javax.swing.JComboBox<String> cbxSala;
    private javax.swing.JComboBox<String> cbxSalaDestino;
    private javax.swing.JComboBox<String> cbxUnidade;
    private javax.swing.JComboBox<String> cbxUnidadeDestino;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tbeDireita;
    private javax.swing.JTable tbeEsquerda;
    // End of variables declaration//GEN-END:variables
    
    public void consertaTamanhoTabelaDireita(){
        tbeDireita.getColumnModel().getColumn(0).setPreferredWidth(50);
        tbeDireita.getColumnModel().getColumn(1).setPreferredWidth(250);
        tbeDireita.getColumnModel().getColumn(2).setPreferredWidth(80);
        tbeDireita.getColumnModel().getColumn(3).setPreferredWidth(80);

        DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
        centralizado.setHorizontalAlignment(SwingConstants.CENTER);
        tbeDireita.getColumnModel().getColumn(0).setCellRenderer(centralizado);
        tbeDireita.setRowHeight(25);
        tbeDireita.updateUI();
    }
    
    public void atualizaTabelaEsquerda() {
        
        String dados[][] = new String[listaPatrimonio.size()][4];
        int i = 0;
        for (PatrimonioM patri : listaPatrimonio) {
            dados[i][0] = String.valueOf(patri.getId());
            dados[i][1] = patri.getCodigo();
            dados[i][2] = patri.getDescricao();
            dados[i][3] = patri.getGrau_conservacao().getDescricao();
            i++;
        }
        String tituloColuna[] = {"ID", "Codigo", "Descrição", "Conservação"};
        DefaultTableModel tabelaCliente = new DefaultTableModel();
        tabelaCliente.setDataVector(dados, tituloColuna);
        tbeEsquerda.setModel(new DefaultTableModel(dados, tituloColuna) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false
            };

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        tbeEsquerda.getColumnModel().getColumn(0).setPreferredWidth(50);
        tbeEsquerda.getColumnModel().getColumn(1).setPreferredWidth(250);
        tbeEsquerda.getColumnModel().getColumn(2).setPreferredWidth(80);
        tbeEsquerda.getColumnModel().getColumn(3).setPreferredWidth(80);

        DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
        centralizado.setHorizontalAlignment(SwingConstants.CENTER);
        tbeEsquerda.getColumnModel().getColumn(0).setCellRenderer(centralizado);
        tbeEsquerda.setRowHeight(25);
        tbeEsquerda.updateUI();
    }
    
    public void atualizaTabelaSelecionados() {
        
        String dados[][] = new String[listaPatrimonioSelecionados.size()][4];
        int i = 0;
        for (PatrimonioM patri : listaPatrimonioSelecionados) {
            dados[i][0] = String.valueOf(patri.getId());
            dados[i][1] = patri.getCodigo();
            dados[i][2] = patri.getDescricao();
            dados[i][3] = patri.getGrau_conservacao().getDescricao();
            i++;
        }
        String tituloColuna[] = {"ID", "Codigo", "Descrição", "Conservação"};
        DefaultTableModel tabelaCliente = new DefaultTableModel();
        tabelaCliente.setDataVector(dados, tituloColuna);
        tbeEsquerda.setModel(new DefaultTableModel(dados, tituloColuna) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false
            };

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        tbeEsquerda.getColumnModel().getColumn(0).setPreferredWidth(50);
        tbeEsquerda.getColumnModel().getColumn(1).setPreferredWidth(200);
        tbeEsquerda.getColumnModel().getColumn(2).setPreferredWidth(80);
        tbeEsquerda.getColumnModel().getColumn(3).setPreferredWidth(80);
        
        
        DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
        centralizado.setHorizontalAlignment(SwingConstants.CENTER);
        tbeEsquerda.getColumnModel().getColumn(0).setCellRenderer(centralizado);
        tbeEsquerda.setRowHeight(25);
        tbeEsquerda.updateUI();
    }
    
    public void atualizaTabelaDireita(){
        String dados[][] = new String[listaMovimentacao.size()][4];
        int i = 0;
        for (PatrimonioM patri : listaMovimentacao) {
            dados[i][0] = String.valueOf(patri.getId());
            dados[i][1] = patri.getCodigo();
            dados[i][2] = patri.getDescricao();
            dados[i][3] = patri.getGrau_conservacao().getDescricao();
            i++;
        }
        String tituloColuna[] = {"ID", "Codigo", "Descrição", "Conservação"};
        DefaultTableModel tabelaCliente = new DefaultTableModel();
        tabelaCliente.setDataVector(dados, tituloColuna);
        tbeDireita.setModel(new DefaultTableModel(dados, tituloColuna) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false
            };

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        tbeDireita.getColumnModel().getColumn(0).setPreferredWidth(50);
        tbeDireita.getColumnModel().getColumn(1).setPreferredWidth(200);
        tbeDireita.getColumnModel().getColumn(2).setPreferredWidth(80);
        tbeDireita.getColumnModel().getColumn(3).setPreferredWidth(80);
        
        
        DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
        centralizado.setHorizontalAlignment(SwingConstants.CENTER);
        tbeDireita.getColumnModel().getColumn(0).setCellRenderer(centralizado);
        tbeDireita.setRowHeight(25);
        tbeDireita.updateUI();
    }
    
    
    public void atualizaBoxUnidade() {
        cbxUnidade.removeAllItems();
        cbxUnidade.addItem("--Selecione--");
        
        cbxUnidadeDestino.removeAllItems();
        cbxUnidadeDestino.addItem("--Selecione--");
        
        try {
            listaUnidade = unidadeDAO.listaTodos();
        } catch (SQLException ex) {
            Logger.getLogger(OrgaoView.class.getName()).log(Level.SEVERE, null, ex);
        }
        String dados[][] = new String[listaUnidade.size()][5];
        int i = 0;
        for (UnidadeM uni : listaUnidade) {
            cbxUnidade.addItem(uni.getNome());
            cbxUnidadeDestino.addItem(uni.getNome());
        }

    }

}
